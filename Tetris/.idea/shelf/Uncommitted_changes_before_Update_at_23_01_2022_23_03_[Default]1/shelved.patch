Index: ../MasterMind/.idea/vcs.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"VcsDirectoryMappings\">\r\n    <mapping directory=\"$PROJECT_DIR$/../..\" vcs=\"Git\" />\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../MasterMind/.idea/vcs.xml b/../MasterMind/.idea/vcs.xml
--- a/../MasterMind/.idea/vcs.xml	
+++ b/../MasterMind/.idea/vcs.xml	
@@ -2,5 +2,6 @@
 <project version="4">
   <component name="VcsDirectoryMappings">
     <mapping directory="$PROJECT_DIR$/../.." vcs="Git" />
+    <mapping directory="$PROJECT_DIR$/.." vcs="Git" />
   </component>
 </project>
\ No newline at end of file
Index: ../MasterMind/src/Aufgabe1.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>/*\r\n    Aufgabe 1) Zweidimensionale Arrays und Gameplay - Mastermind\r\n*/\r\n\r\nimport codedraw.CodeDraw;\r\nimport codedraw.Palette;\r\nimport codedraw.textformat.HorizontalAlign;\r\nimport codedraw.textformat.TextFormat;\r\nimport codedraw.textformat.VerticalAlign;\r\n\r\n\r\nimport java.awt.Color;\r\nimport java.awt.event.MouseEvent;\r\nimport java.lang.management.PlatformLoggingMXBean;\r\nimport java.util.Arrays;\r\n\r\npublic class Aufgabe1 {\r\n    // global constants\r\n    private static final int NUMBER_OF_TURNS = 10;\r\n    private static final int CODE_LENGTH = 4;\r\n    private static final int NUMBER_OF_COLUMNS = CODE_LENGTH * 2 + 1;\r\n    private static final Color[] COLORS = new Color[]{Color.BLUE, Color.CYAN, Color.GREEN, Color.MAGENTA, Color.ORANGE, Color.DARK_GRAY, Color.RED, Color.PINK, Color.YELLOW};\r\n\r\n    // global variables\r\n    private static int[][] playField = null;\r\n    private static int[][] tips = null;\r\n    private static int turn = 0;\r\n    private static int pin = 0;\r\n    private static int[] solution = null;\r\n\r\n    // initializes all global variables for the game\r\n    private static void initGame() {\r\n        playField = new int[NUMBER_OF_TURNS][CODE_LENGTH];\r\n        tips = new int[NUMBER_OF_TURNS][CODE_LENGTH]; // 1 == red; 2 == white\r\n        turn = 0;\r\n        pin = 0;\r\n        solution = generateCode();\r\n    }\r\n\r\n    // generates array with length CODE_LENGTH and random numbers from 1 to COLORS.length\r\n    private static int[] generateCode() {\r\n        int arr[] = new int[CODE_LENGTH];\r\n        for (int i = 0; arr[arr.length - 1] == 0; i++) {\r\n            int counter = 0;\r\n            int color = (int) (Math.random() * 9) + 1;\r\n            for (int j = 0; j < arr.length; j++) {\r\n                if (color == arr[j]) {\r\n                    counter++;\r\n                }\r\n            }\r\n            if (counter == 0) {\r\n                arr[i] = color;\r\n            } else {\r\n                i--;\r\n            }\r\n        }\r\n        System.out.println(Arrays.toString(arr));\r\n        return arr;\r\n    }\r\n\r\n    // calculates red and white tip pins\r\n    private static void updateTips() {\r\n\r\n        int counter = 0;\r\n        for (int i = 0; i < playField[turn].length; i++) {\r\n            for (int j = 0; j < solution.length; j++) {\r\n                if (i == j && playField[turn][i] == solution[j]) {\r\n                    tips[turn][counter] = 1;\r\n                    counter++;\r\n                }\r\n            }\r\n        }\r\n\r\n        int counter2 = 0;\r\n        for (int i = 0; i < playField[turn].length; i++) {\r\n            for (int j = 0; j < solution.length; j++) {\r\n                if (playField[turn][i] == solution[j]) {\r\n                    counter2++;\r\n                    if (counter2 > counter) {\r\n                        tips[turn][counter2 - 1] = 2;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    // draws game to screen\r\n    private static void drawGame(CodeDraw myDrawObj) {\r\n        myDrawObj.setColor(Color.GRAY);\r\n        myDrawObj.fillRectangle(0, 0, 800, 800);\r\n\r\n        for (int i = 0; i < NUMBER_OF_TURNS; i++) {\r\n            for (int j = 0; j < CODE_LENGTH; j++) {\r\n                if (playField[i][j] == 0) {\r\n                    myDrawObj.setColor(Color.WHITE);\r\n                } else {\r\n                    myDrawObj.setColor(COLORS[playField[i][j] - 1]);\r\n                }\r\n                myDrawObj.fillCircle(45 + 45 * j * 2, 760 - 40 * i * 2, 40);\r\n            }\r\n        }\r\n\r\n        for (int i = 0; i < NUMBER_OF_TURNS; i++) {\r\n            for (int j = 0; j < CODE_LENGTH; j++) {\r\n                if (tips[i][j] == 1) {\r\n                    myDrawObj.setColor(Color.RED);\r\n                    myDrawObj.fillCircle(480 + j * 80, 760 - 40 * i * 2, 20);\r\n                }\r\n                if (tips[i][j] == 2) {\r\n                    myDrawObj.setColor(Color.WHITE);\r\n                    myDrawObj.fillCircle(480 + j * 80, 760 - 40 * i * 2, 20);\r\n                }\r\n            }\r\n        }\r\n\r\n        for (int i = 0; i < COLORS.length; i++) {\r\n            myDrawObj.setColor(COLORS[i]);\r\n            myDrawObj.fillSquare(800, 80 * i, 80);\r\n        }\r\n        myDrawObj.drawImage(800, 720, \"src/back_button.png\");\r\n\r\n        myDrawObj.show();\r\n    }\r\n\r\n\r\n    private static void processGameStep(CodeDraw myDrawObj, MouseEvent me) {\r\n        int[] clickPos = new int[2];\r\n        clickPos[0] = me.getX();\r\n        clickPos[1] = me.getY();\r\n\r\n        int width = myDrawObj.getWidth();\r\n        int height = myDrawObj.getHeight();\r\n        boolean gameCleared = false;\r\n        // TODO: Implementieren Sie hier Ihre Lösung für die Methode\r\n\r\n\r\n        if (clickPos[0] >= 800) {\r\n            if(clickPos[1] >= 0 && clickPos[1] < 80){\r\n                if(checkIfContains(playField, 1) == true){\r\n                    playField[turn][pin] = 1;\r\n                    pin++;\r\n                }\r\n            }\r\n            if(clickPos[1] >= 80 && clickPos[1] < 160){\r\n                if(checkIfContains(playField, 2) == true){\r\n                    playField[turn][pin] = 2;\r\n                    pin++;\r\n                }\r\n            }\r\n            if(clickPos[1] >= 160 && clickPos[1] < 240){\r\n                if(checkIfContains(playField, 3) == true){\r\n                    playField[turn][pin] = 3;\r\n                    pin++;\r\n                }\r\n            }\r\n            if(clickPos[1] >= 240 && clickPos[1] < 320){\r\n                if(checkIfContains(playField, 4) == true){\r\n                    playField[turn][pin] = 4;\r\n                    pin++;\r\n                }\r\n            }\r\n            if(clickPos[1] >= 320 && clickPos[1] < 400){\r\n                if(checkIfContains(playField, 5) == true){\r\n                    playField[turn][pin] = 5;\r\n                    pin++;\r\n                }\r\n            }\r\n            if(clickPos[1] >= 400 && clickPos[1] < 480){\r\n                if(checkIfContains(playField, 6) == true){\r\n                    playField[turn][pin] = 6;\r\n                    pin++;\r\n                }\r\n            }\r\n            if(clickPos[1] >= 480 && clickPos[1] < 560){\r\n                if(checkIfContains(playField, 7) == true){\r\n                    playField[turn][pin] = 7;\r\n                    pin++;\r\n                }\r\n            }\r\n            if(clickPos[1] >= 560 && clickPos[1] < 640){\r\n                if(checkIfContains(playField, 8) == true){\r\n                    playField[turn][pin] = 8;\r\n                    pin++;\r\n                }\r\n            }\r\n            if(clickPos[1] >= 640 && clickPos[1] < 720){\r\n                if(checkIfContains(playField, 9) == true){\r\n                    playField[turn][pin] = 9;\r\n                    pin++;\r\n                }\r\n            }\r\n            if(clickPos[1] >= 720 && clickPos[1] < 800){\r\n                if(pin > 0){\r\n                    playField[turn][--pin] = 0;\r\n                }\r\n            }\r\n\r\n            if(pin == 4){\r\n                updateTips();\r\n                drawGame(myDrawObj);\r\n                if(checkIfWonLostOrContinue() == 2){\r\n                    myDrawObj.setColor(Color.GRAY);\r\n                    myDrawObj.fillRectangle(250, 350, 300, 100);\r\n                    myDrawObj.setColor(Color.BLACK);\r\n                    myDrawObj.drawRectangle(250, 350, 300, 100);\r\n                    myDrawObj.setColor(Color.RED);\r\n                    myDrawObj.drawText(300, 375, \"You LOST!\");\r\n                    myDrawObj.show(5000);\r\n                    gameCleared = true;\r\n                    clearBoard(myDrawObj);\r\n                }\r\n                if(checkIfWonLostOrContinue() == 1){\r\n                    myDrawObj.setColor(Color.GRAY);\r\n                    myDrawObj.fillRectangle(250, 350, 300, 100);\r\n                    myDrawObj.setColor(Color.BLACK);\r\n                    myDrawObj.drawRectangle(250, 350, 300, 100);\r\n                    myDrawObj.setColor(Color.GREEN);\r\n                    myDrawObj.drawText(300, 375, \"You WON!\");\r\n                    myDrawObj.show(5000);\r\n                    gameCleared = true;\r\n                    clearBoard(myDrawObj);\r\n                }\r\n                if(gameCleared == false){\r\n                    pin = 0;\r\n                    turn++;\r\n                }\r\n            }else{\r\n                drawGame(myDrawObj);\r\n            }\r\n        }\r\n    }\r\n\r\n    private static int checkIfWonLostOrContinue(){\r\n        if(Arrays.equals(playField[turn], solution)){\r\n            return 1;\r\n        }\r\n        if(turn == NUMBER_OF_TURNS - 1 && pin == 4){\r\n            return 2;\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    // clears game board\r\n    private static void clearBoard(CodeDraw myDrawObj) {\r\n        for(int i = turn; i >= 0; i--){\r\n            playField[i] = new int[CODE_LENGTH];\r\n            tips[i] = new int[CODE_LENGTH];\r\n            drawGame(myDrawObj);\r\n            myDrawObj.show(500);\r\n        }\r\n        initGame();\r\n\r\n    }\r\n    private static boolean checkIfContains(int arr[][], int color){ // returns true if color is not in the array\r\n        int counter = 0;\r\n        for (int i = 0; i < arr[turn].length; i++) {\r\n            if(arr[turn][i] == color){\r\n                counter++;\r\n            }\r\n        }\r\n\r\n        if(counter > 0){\r\n            return false;\r\n        }\r\n        return true;\r\n\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n\r\n        int height = 800;\r\n        int width = height + height / (COLORS.length + 1);\r\n\r\n        CodeDraw myDrawObj = new CodeDraw(width, height);\r\n        myDrawObj.setTitle(\"MasterMind Game\");\r\n\r\n        initGame();\r\n\r\n        //for testing to print the solution\r\n\r\n\r\n        drawGame(myDrawObj);\r\n\r\n        myDrawObj.onMouseClick(Aufgabe1::processGameStep);\r\n\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../MasterMind/src/Aufgabe1.java b/../MasterMind/src/Aufgabe1.java
--- a/../MasterMind/src/Aufgabe1.java	
+++ b/../MasterMind/src/Aufgabe1.java	
@@ -13,6 +13,7 @@
 import java.awt.event.MouseEvent;
 import java.lang.management.PlatformLoggingMXBean;
 import java.util.Arrays;
+import java.util.Scanner;
 
 public class Aufgabe1 {
     // global constants
@@ -266,6 +267,8 @@
 
     }
 
+
+
     public static void main(String[] args) {
 
         int height = 800;
